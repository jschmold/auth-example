import bcrypt from 'bcrypt';

import * as constants from './user.constants';

import { Injectable, NotFoundException, InternalServerErrorException, ConflictException } from '@nestjs/common';
import { CreateUser } from './types/create-user';
import { UserModel } from './models/user.model';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { IGetUser } from './types/get-user';
import { UserConfirmationModel } from './models/user-confirmation.model';

@Injectable()
export class UserService {

  constructor(
    @InjectRepository(UserModel)
    private userRepo: Repository<UserModel>,

    @InjectRepository(UserConfirmationModel)
    private confirmRepo: Repository<UserConfirmationModel>
  ) {}

  public async confirmRegistration(token: string): Promise<void> {
    const conf = await this.confirmRepo.findOne({ where: { token } });
    if (conf == null) {
      throw new NotFoundException();
    }

    if (conf.confirmedAt != null) {
      throw new ConflictException('Account already confirmed');
    }
    
    const user = await this.userRepo.findOne(conf.userId);
    if (user == null) throw new InternalServerErrorException();

    conf.confirmedAt = new Date();
    user.confirmedAt = conf.confirmedAt;

    await Promise.all([
      this.userRepo.save(user),
      this.confirmRepo.save(conf),
    ]);
  }

  /**
   * Given a password while registering a user, hash it using bcrypt to return a secure version
   * for saving in the database
   */
  public async createPassword(arg: string): Promise<string> {
    return bcrypt.hash(arg, constants.hashRounds)
  }

  /**
   * Create a new user in the database
   */
  public async createUser(create: CreateUser): Promise<UserModel> {
    const password = await this.createPassword(create.password);
    const data = this.userRepo.create({ ... create, password})

    await this.userRepo.createQueryBuilder()
      .insert()
      .values(data)
      .returning('*')
      .execute()

    return data;
  }

  /**
   * Create a new user-account confirmation. Token is automatically generated by database.
   */
  public async createConfirmation(user: UserModel): Promise<UserConfirmationModel> {
    const created = this.confirmRepo.create({ email: user.email, userId: user.id });
    await this.confirmRepo.createQueryBuilder()
      .insert()
      .values(created)
      .returning('*')
      .execute();

    return created;
  }

  /**
   * Get a user by uniquely identifiable information (id or email)
   */
  public async getUser({ id, email }: IGetUser): Promise<UserModel | undefined> {
    const find: Partial<UserModel> = {};
    if (!!id) find.id = id;
    if (!!email) find.email = email;

    return this.userRepo.findOne(find);
  }
}
